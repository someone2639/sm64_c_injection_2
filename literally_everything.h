#include <ultra64.h>
#include "sm64.h"
#include "behavior_data.h"
#include "types.h"
#include "audio/seqplayer.h"
#include "audio/synthesis.h"
#include "audio/playback.h"
#include "audio/effects.h"
#include "audio/heap.h"
#include "audio/data.h"
#include "audio/internal.h"
#include "audio/external.h"
#include "audio/load.h"
#include "game/rendering_graph_node.h"
#include "game/segment2.h"
#include "game/mario_misc.h"
#include "game/mario_actions_moving.h"
#include "game/interaction.h"
#include "game/geo_misc.h"
#include "game/segment7.h"
#include "game/debug_course.h"
#include "game/obj_behaviors.h"
#include "game/main.h"
#include "game/camera.h"
#include "game/screen_transition.h"
#include "game/memory.h"
#include "game/mario_step.h"
#include "game/shadow.h"
#include "game/platform_displacement.h"
#include "game/mario_actions_automatic.h"
#include "game/mario_actions_object.h"
#include "game/decompress.h"
#include "game/area.h"
#include "game/thread6.h"
#include "game/ingame_menu.h"
#include "game/game_init.h"
#include "game/spawn_sound.h"
#include "game/object_collision.h"
#include "game/hud.h"
#include "game/level_update.h"
#include "game/mario_actions_cutscene.h"
#include "game/profiler.h"
#include "game/envfx_snow.h"
#include "game/object_list_processor.h"
#include "game/envfx_bubbles.h"
#include "game/mario_actions_submerged.h"
#include "game/obj_behaviors_2.h"
#include "game/mario_actions_stationary.h"
#include "game/mario.h"
#include "game/paintings.h"
#include "game/save_file.h"
#include "game/object_helpers.h"
#include "game/mario_actions_airborne.h"
#include "game/print.h"
#include "game/level_geo.h"
#include "game/skybox.h"
#include "game/sound_init.h"
#include "game/debug.h"
#include "game/macro_special_objects.h"
#include "game/behavior_actions.h"
#include "game/spawn_object.h"
#include "game/moving_texture.h"
#include "game/camera.h"
// src/game/mario_misc.c
extern void bhv_toad_message_loop(void);
extern void bhv_toad_message_init(void);
extern void bhv_unlock_door_star_init(void);
extern void bhv_unlock_door_star_loop(void);
// src/game/hud.c
extern void render_hud_tex_lut(s32 x, s32 y, u8 *texture);
extern void render_hud_small_tex_lut(s32 x, s32 y, u8 *texture);
extern void render_power_meter_health_segment(s16 numHealthWedges);
extern void render_dl_power_meter(s16 numHealthWedges);
extern void animate_power_meter_emphasized(void);
extern void handle_power_meter_actions(s16 numHealthWedges);
extern void render_hud_power_meter(void);
extern void render_hud_mario_lives(void);
extern void render_hud_coins(void);
extern void render_hud_stars(void);
extern void render_hud_keys(void);
extern void render_hud_timer(void);
extern void set_hud_camera_status(s16 status);
extern void render_hud_camera_status(void);
extern void render_hud(void);
// src/game/camera.c
extern void set_camera_shake_from_hit(s16 shake);
extern void set_environmental_camera_shake(s16 shake);
extern void set_camera_shake_from_point(s16 shake, f32 posX, f32 posY, f32 posZ);
extern void unused_set_camera_pitch_shake_env(s16 shake);
extern f32 calc_y_to_curr_floor(f32 *posOff, f32 posMul, f32 posBound, f32 *focOff, f32 focMul, f32 focBound);
extern void focus_on_mario(Vec3f focus, Vec3f pos, f32 posYOff, f32 focYOff, f32 dist, s16 pitch, s16 yaw);
extern void set_camera_height(struct Camera *c, f32 goalHeight);
extern s16 look_down_slopes(s16 camYaw);
extern void pan_ahead_of_player(struct Camera *c);
extern s16 find_in_bounds_yaw_wdw_bob_thi(Vec3f pos, Vec3f origin, s16 yaw);
extern s32 update_radial_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern s32 update_8_directions_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern void radial_camera_move(struct Camera *c);
extern void lakitu_zoom(f32 rangeDist, s16 rangePitch);
extern void radial_camera_input_default(struct Camera *c);
extern void update_yaw_and_dist_from_c_up(UNUSED struct Camera *c);
extern void mode_radial_camera(struct Camera *c);
extern void mode_8_directions_camera(struct Camera *c);
extern s32 update_outward_radial_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern void mode_outward_radial_camera(struct Camera *c);
extern s32 update_parallel_tracking_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern s32 update_fixed_camera(struct Camera *c, Vec3f focus, UNUSED Vec3f pos);
extern s32 update_boss_fight_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern s32 unused_update_mode_5_camera(UNUSED struct Camera *c, UNUSED Vec3f focus, UNUSED Vec3f pos);
extern void mode_boss_fight_camera(struct Camera *c);
extern void mode_parallel_tracking_camera(struct Camera *c);
extern void mode_fixed_camera(struct Camera *c);
extern s32 update_behind_mario_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern s32 mode_behind_mario(struct Camera *c);
extern s16 update_slide_camera(struct Camera *c);
extern void mode_behind_mario_camera(struct Camera *c);
extern s32 nop_update_water_camera(UNUSED struct Camera *c, UNUSED Vec3f focus, UNUSED Vec3f pos);
extern void mode_water_surface_camera(struct Camera *c);
extern s32 update_mario_camera(UNUSED struct Camera *c, Vec3f focus, Vec3f pos);
extern s16 update_default_camera(struct Camera *c);
extern void mode_default_camera(struct Camera *c);
extern void mode_lakitu_camera(struct Camera *c);
extern void mode_mario_camera(struct Camera *c);
extern s32 update_spiral_stairs_camera(struct Camera *c, Vec3f focus, Vec3f pos);
extern void mode_spiral_stairs_camera(struct Camera *c);
extern s32 update_slide_or_0f_camera(UNUSED struct Camera *c, Vec3f focus, Vec3f pos);
extern void mode_slide_camera(struct Camera *c);
extern void store_lakitu_cam_info_for_c_up(struct Camera *c);
extern s32 set_mode_c_up(struct Camera *c);
extern s32 exit_c_up(struct Camera *c);
extern s32 update_c_up(UNUSED struct Camera *c, Vec3f focus, Vec3f pos);
extern void move_mario_head_c_up(UNUSED struct Camera *c);
extern void move_into_c_up(struct Camera *c);
extern s32 mode_c_up_camera(struct Camera *c);
extern s32 update_in_cannon(UNUSED struct Camera *c, Vec3f focus, Vec3f pos);
extern void mode_cannon_camera(struct Camera *c);
extern void transition_next_state(UNUSED struct Camera *c, s16 frames);
extern void transition_to_camera_mode(struct Camera *c, s16 newMode, s16 numFrames);
extern void set_camera_mode(struct Camera *c, s16 mode, s16 frames);
extern void update_lakitu(struct Camera *c);
extern void update_camera(struct Camera *c);
extern void reset_camera(struct Camera *c);
extern void init_camera(struct Camera *c);
extern void zoom_out_if_paused_and_outside(struct GraphNodeCamera *camera);
extern void select_mario_cam_mode(void);
extern void create_camera(struct GraphNodeCamera *gc, struct AllocOnlyPool *pool);
extern void update_graph_node_camera(struct GraphNodeCamera *gc);
extern void stub_camera_2(UNUSED struct Camera *c);
extern void stub_camera_3(UNUSED struct Camera *c);
extern void vec3f_sub(Vec3f dst, Vec3f src);
extern void object_pos_to_vec3f(Vec3f dst, struct Object *o);
extern void vec3f_to_object_pos(struct Object *o, Vec3f src);
extern void unused_object_angle_to_vec3s(Vec3s dst, struct Object *o);
extern void evaluate_cubic_spline(f32 u, Vec3f Q, Vec3f a0, Vec3f a1, Vec3f a2, Vec3f a3);
extern s32 move_point_along_spline(Vec3f p, struct CutsceneSplinePoint spline[], s16 *splineSegment, f32 *progress);
extern s32 cam_select_alt_mode(s32 selection);
extern s32 set_cam_angle(s32 mode);
extern void set_handheld_shake(u8 mode);
extern void shake_camera_handheld(Vec3f pos, Vec3f focus);
extern s32 find_c_buttons_pressed(u16 currentState, u16 buttonsPressed, u16 buttonsDown);
extern s32 update_camera_hud_status(struct Camera *c);
extern s32 collide_with_walls(Vec3f pos, f32 offsetY, f32 radius);
extern s32 vec3f_compare(Vec3f pos, f32 posX, f32 posY, f32 posZ);
extern s32 clamp_pitch(Vec3f from, Vec3f to, s16 maxPitch, s16 minPitch);
extern s32 is_within_100_units_of_mario(f32 posX, f32 posY, f32 posZ);
extern s32 set_or_approach_f32_asymptotic(f32 *dst, f32 goal, f32 scale);
extern s32 approach_f32_asymptotic_bool(f32 *current, f32 target, f32 multiplier);
extern f32 approach_f32_asymptotic(f32 current, f32 target, f32 multiplier);
extern s32 approach_s16_asymptotic_bool(s16 *current, s16 target, s16 divisor);
extern s32 approach_s16_asymptotic(s16 current, s16 target, s16 divisor);
extern void approach_vec3f_asymptotic(Vec3f current, Vec3f target, f32 xMul, f32 yMul, f32 zMul);
extern void set_or_approach_vec3f_asymptotic(Vec3f dst, Vec3f goal, f32 xMul, f32 yMul, f32 zMul);
extern void approach_vec3s_asymptotic(Vec3s current, Vec3s target, s16 xMul, s16 yMul, s16 zMul);
extern s32 camera_approach_s16_symmetric_bool(s16 *current, s16 target, s16 increment);
extern s32 camera_approach_s16_symmetric(s16 current, s16 target, s16 increment);
extern s32 set_or_approach_s16_symmetric(s16 *current, s16 target, s16 increment);
extern s32 camera_approach_f32_symmetric_bool(f32 *current, f32 target, f32 increment);
extern f32 camera_approach_f32_symmetric(f32 current, f32 target, f32 increment);
extern void random_vec3s(Vec3s dst, s16 xRange, s16 yRange, s16 zRange);
extern s16 reduce_by_dist_from_camera(s16 value, f32 maxDist, f32 posX, f32 posY, f32 posZ);
extern s32 clamp_positions_and_find_yaw(Vec3f pos, Vec3f origin, f32 xMax, f32 xMin, f32 zMax, f32 zMin);
extern s32 calc_avoid_yaw(s16 yawFromMario, s16 wallYaw);
extern s32 is_surf_within_bounding_box(struct Surface *surf, f32 xMax, f32 yMax, f32 zMax);
extern s32 is_behind_surface(Vec3f pos, struct Surface *surf);
extern s32 is_range_behind_surface(Vec3f from, Vec3f to, struct Surface *surf, s16 range, s16 surfType);
extern s32 is_mario_behind_surface(UNUSED struct Camera *c, struct Surface *surf);
extern void scale_along_line(Vec3f dst, Vec3f from, Vec3f to, f32 scale);
extern s32 is_pos_in_bounds(Vec3f pos, Vec3f center, Vec3f bounds, s16 boundsYaw);
extern s16 calculate_pitch(Vec3f from, Vec3f to);
extern s16 calculate_yaw(Vec3f from, Vec3f to);
extern void calculate_angles(Vec3f from, Vec3f to, s16 *pitch, s16 *yaw);
extern f32 calc_abs_dist(Vec3f a, Vec3f b);
extern f32 calc_hor_dist(Vec3f a, Vec3f b);
extern void rotate_in_xz(Vec3f dst, Vec3f src, s16 yaw);
extern void rotate_in_yz(Vec3f dst, Vec3f src, s16 pitch);
extern void set_camera_pitch_shake(s16 mag, s16 decay, s16 inc);
extern void set_camera_yaw_shake(s16 mag, s16 decay, s16 inc);
extern void set_camera_roll_shake(s16 mag, s16 decay, s16 inc);
extern void set_pitch_shake_from_point(s16 mag, s16 decay, s16 inc, f32 maxDist, f32 posX, f32 posY, f32 posZ);
extern void set_yaw_shake_from_point(s16 mag, s16 decay, s16 inc, f32 maxDist, f32 posX, f32 posY, f32 posZ);
extern void increment_shake_offset(s16 *offset, s16 increment);
extern void shake_camera_pitch(Vec3f pos, Vec3f focus);
extern void shake_camera_yaw(Vec3f pos, Vec3f focus);
extern void shake_camera_roll(s16 *roll);
extern s32 offset_yaw_outward_radial(struct Camera *c, s16 areaYaw);
extern void cutscene_intro_peach_play_message_music(void);
extern void cutscene_intro_peach_play_lakitu_flying_music(void);
extern void play_camera_buzz_if_cdown(void);
extern void play_camera_buzz_if_cbutton(void);
extern void play_camera_buzz_if_c_sideways(void);
extern void play_sound_cbutton_up(void);
extern void play_sound_cbutton_down(void);
extern void play_sound_cbutton_side(void);
extern void play_sound_button_change_blocked(void);
extern void play_sound_rbutton_changed(void);
extern void play_sound_if_cam_switched_to_lakitu_or_mario(void);
extern s32 radial_camera_input(struct Camera *c, UNUSED f32 unused);
extern s32 trigger_cutscene_dialog(s32 trigger);
extern void handle_c_button_movement(struct Camera *c);
extern void clear_cutscene_vars(UNUSED struct Camera *c);
extern void start_cutscene(struct Camera *c, u8 cutscene);
extern s32 determine_dance_cutscene(UNUSED struct Camera *c);
extern u8 open_door_cutscene(u8 pullResult, u8 pushResult);
extern u8 get_cutscene_from_mario_status(struct Camera *c);
extern void warp_camera(f32 displacementX, f32 displacementY, f32 displacementZ);
extern void approach_camera_height(struct Camera *c, f32 goal, f32 inc);
extern void stub_camera_4(UNUSED s32 a, UNUSED s32 b, UNUSED s32 c, UNUSED s32 d);
extern void set_focus_rel_mario(struct Camera *c, f32 leftRight, f32 yOff, f32 forwBack, s16 yawOff);
extern void offset_rotated(Vec3f dst, Vec3f from, Vec3f to, Vec3s rotation);
extern void offset_rotated_coords(Vec3f dst, Vec3f from, Vec3s rotation, f32 xTo, f32 yTo, f32 zTo);
extern void determine_pushing_or_pulling_door(s16 *rotation);
extern s32 set_camera_mode_fixed(struct Camera *c, s16 x, s16 y, s16 z);
extern void set_camera_mode_8_directions(struct Camera *c);
extern void set_camera_mode_boss_fight(struct Camera *c);
extern void set_camera_mode_close_cam(u8 *mode);
extern void set_camera_mode_radial(struct Camera *c, s16 transitionTime);
extern void parallel_tracking_init(struct Camera *c, struct ParallelTrackingPoint *path);
extern void set_fixed_cam_axis_sa_lobby(UNUSED s16 preset);
extern void check_blocking_area_processing(const u8 *mode);
extern void move_camera_through_floor_while_descending(struct Camera *c, f32 height);
extern u32 surface_type_modes(struct Camera *c);
extern u32 set_mode_if_not_set_by_surface(struct Camera *c, u8 mode);
extern void surface_type_modes_thi(struct Camera *c);
extern s16 camera_course_processing(struct Camera *c);
extern void resolve_geometry_collisions(Vec3f pos, UNUSED Vec3f lastGood);
extern s32 rotate_camera_around_walls(struct Camera *c, Vec3f cPos, s16 *avoidYaw, s16 yawRange);
extern void find_mario_floor_and_ceil(struct PlayerGeometry *pg);
extern void start_object_cutscene(u8 cutscene, struct Object *o);
extern u8 start_object_cutscene_without_focus(u8 cutscene);
extern s32 unused_dialog_cutscene_response(u8 cutscene);
extern s16 cutscene_object_with_dialog(u8 cutscene, struct Object *o, s16 dialogID);
extern s16 cutscene_object_without_dialog(u8 cutscene, struct Object *o);
extern s16 cutscene_object(u8 cutscene, struct Object *o);
extern void update_camera_yaw(struct Camera *c);
extern void cutscene_reset_spline(void);
extern void stop_cutscene_and_retrieve_stored_info(struct Camera *c);
extern void cap_switch_save(s16 dummy);
extern void init_spline_point(struct CutsceneSplinePoint *splinePoint, s8 index, u8 speed, Vec3s point);
extern void copy_spline_segment(struct CutsceneSplinePoint dst[], struct CutsceneSplinePoint src[]);
extern s16 cutscene_common_set_dialog_state(s32 state);
extern void reset_pan_distance(UNUSED struct Camera *c);
extern void player2_rotate_cam(struct Camera *c, s16 minPitch, s16 maxPitch, s16 minYaw, s16 maxYaw);
extern void store_info_cannon(struct Camera *c);
extern void retrieve_info_cannon(struct Camera *c);
extern void store_info_star(struct Camera *c);
extern void retrieve_info_star(struct Camera *c);
extern void pan_camera(struct Camera *c, s16 incPitch, s16 incYaw);
extern void rotate_and_move_vec3f(Vec3f to, Vec3f from, f32 incDist, s16 incPitch, s16 incYaw);
extern void set_flag_post_door(struct Camera *c);
extern void cutscene_soften_music(UNUSED struct Camera *c);
extern void cutscene_unsoften_music(UNUSED struct Camera *c);
extern void focus_in_front_of_mario(struct Camera *c, f32 dist, f32 speed);
extern void cutscene_pan_cvar9(struct Camera *c);
extern void cutscene_stop_dialog(UNUSED struct Camera *c);
extern void cutscene_goto_cvar_pos(struct Camera *c, f32 goalDist, s16 goalPitch, s16 rotPitch, s16 rotYaw);
extern void cannon_approach_prev(f32 *value, f32 target);
extern void water_death_move_to_mario_side(struct Camera *c);
extern void death_goto_mario(struct Camera *c);
extern void play_cutscene(struct Camera *c);
extern s32 cutscene_event(CameraEvent event, struct Camera *c, s16 start, s16 end);
extern s32 cutscene_spawn_obj(u32 obj, s16 frame);
extern void set_fov_shake(s16 amplitude, s16 decay, s16 shakeSpeed);
extern void set_fov_shake_from_point(s16 amplitude, s16 decay, s16 shakeSpeed, f32 maxDist, f32 posX, f32 posY, f32 posZ);
extern void shake_camera_fov(struct GraphNodePerspective *perspective);
extern void set_fov_30(UNUSED struct MarioState *m);
extern void approach_fov_20(UNUSED struct MarioState *m);
extern void set_fov_45(UNUSED struct MarioState *m);
extern void set_fov_29(UNUSED struct MarioState *m);
extern void zoom_fov_30(UNUSED struct MarioState *m);
extern void fov_default(struct MarioState *m);
extern void approach_fov_30(UNUSED struct MarioState *m);
extern void approach_fov_60(UNUSED struct MarioState *m);
extern void approach_fov_45(struct MarioState *m);
extern void approach_fov_80(UNUSED struct MarioState *m);
extern void set_fov_bbh(struct MarioState *m);
extern void set_fov_function(u8 func);
extern void cutscene_set_fov_shake_preset(u8 preset);
extern void set_fov_shake_from_point_preset(u8 preset, f32 posX, f32 posY, f32 posZ);
extern void obj_rotate_towards_point(struct Object *o, Vec3f point, s16 pitchOff, s16 yawOff, s16 pitchDiv, s16 yawDiv);
// src/game/spawn_sound.c
extern void exec_anim_sound_state(struct SoundState *soundStates);
extern void create_sound_spawner(s32 soundMagic);
extern void cur_obj_play_sound_1(s32 soundMagic);
extern void epicStyle(s32 a, float b);
extern void cur_obj_play_sound_2(s32 soundMagic);
// src/game/level_update.c
extern u16 level_control_timer(s32 timerOp);
extern u32 pressed_pause(void);
extern void set_play_mode(s16 playMode);
extern void warp_special(s32 arg);
extern void fade_into_special_warp(u32 arg, u32 color);
extern void stub_level_update_1(void);
extern void load_level_init_text(u32 arg);
extern void init_door_warp(struct SpawnInfo *spawnInfo, u32 arg1);
extern void set_mario_initial_cap_powerup(struct MarioState *m);
extern void set_mario_initial_action(struct MarioState *m, u32 spawnType, u32 actionArg);
extern void init_mario_after_warp(void);
extern void warp_area(void);
extern void warp_level(void);
extern void warp_credits(void);
extern void check_instant_warp(void);
extern s16 music_changed_through_warp(s16 arg);
extern void initiate_warp(s16 destLevel, s16 destArea, s16 destWarpNode, s32 arg3);
extern void initiate_painting_warp(void);
extern s16 level_trigger_warp(struct MarioState *m, s32 warpOp);
extern void initiate_delayed_warp(void);
extern void update_hud_values(void);
extern void basic_update(UNUSED s16 *arg);
extern s32 play_mode_normal(void);
extern s32 play_mode_paused(void);
extern s32 play_mode_frame_advance(void);
extern void level_set_transition(s16 length, void (*updateFunction)(s16 *));
extern s32 play_mode_change_area(void);
extern s32 play_mode_change_level(void);
extern s32 update_level(void);
extern s32 init_level(void);
extern s32 lvl_init_or_update(s16 initOrUpdate, UNUSED s32 unused);
extern s32 lvl_init_from_save_file(UNUSED s16 arg0, s32 levelNum);
extern s32 lvl_set_current_level(UNUSED s16 arg0, s32 levelNum);
extern s32 lvl_play_the_end_screen_sound(UNUSED s16 arg0, UNUSED s32 arg1);
// src/game/debug.c
extern void stub_debug_1(void);
extern void stub_debug_2(void);
extern void stub_debug_3(void);
extern void stub_debug_4(void);
extern void print_text_array_info(s16 *printState, const char *str, s32 number);
extern void set_text_array_x_y(s32 xOffset, s32 yOffset);
extern void print_debug_bottom_up(const char *str, s32 number);
extern void print_debug_top_down_objectinfo(const char *str, s32 number);
extern void print_debug_top_down_mapinfo(const char *str, s32 number);
extern void print_debug_top_down_normal(const char *str, s32 number);
extern void print_mapinfo(void);
extern void print_mapinfo(void);
extern void print_checkinfo(void);
extern void print_surfaceinfo(void);
extern void print_stageinfo(void);
extern void print_string_array_info(const char **strArr);
extern void print_effectinfo(void);
extern void print_enemyinfo(void);
extern void update_debug_dpadmask(void);
extern void debug_unknown_level_select_check(void);
extern void reset_debug_objectinfo(void);
extern void try_modify_debug_controls(void);
extern void stub_debug_5(void);
extern void try_print_debug_mario_object_info(void);
extern void try_print_debug_mario_level_info(void);
extern void try_do_mario_debug_object_spawn(void);
extern void debug_print_obj_move_flags(void);
extern void debug_enemy_unknown(s16 *enemyArr);
// src/game/save_file.c
extern void save_file_do_save(s32 fileIndex);
extern void save_file_erase(s32 fileIndex);
extern void save_file_load_all(void);
extern void save_file_reload(void);
extern void save_file_collect_star_or_key(s16 coinScore, s16 starIndex);
extern s32 save_file_exists(s32 fileIndex);
extern u32 save_file_get_max_coin_score(s32 courseIndex);
extern s32 save_file_get_course_star_count(s32 fileIndex, s32 courseIndex);
extern s32 save_file_get_total_star_count(s32 fileIndex, s32 minCourse, s32 maxCourse);
extern void save_file_set_flags(u32 flags);
extern void save_file_clear_flags(u32 flags);
extern u32 save_file_get_flags(void);
extern u32 save_file_get_star_flags(s32 fileIndex, s32 courseIndex);
extern void save_file_set_star_flags(s32 fileIndex, s32 courseIndex, u32 starFlags);
extern s32 save_file_get_course_coin_score(s32 fileIndex, s32 courseIndex);
extern s32 save_file_is_cannon_unlocked(void);
extern void save_file_set_cannon_unlocked(void);
extern void save_file_set_cap_pos(s16 x, s16 y, s16 z);
extern s32 save_file_get_cap_pos(Vec3s capPos);
extern void save_file_set_sound_mode(u16 mode);
extern u16 save_file_get_sound_mode(void);
extern void save_file_move_cap_to_default_location(void);
extern void eu_set_language(u16 language);
extern u16 eu_get_language(void);
extern void disable_warp_checkpoint(void);
extern void check_if_should_set_warp_checkpoint(struct WarpNode *warpNode);
extern s32 check_warp_checkpoint(struct WarpNode *warpNode);
// src/game/crash_screen.c
extern void crash_screen_draw_rect(s32 x, s32 y, s32 w, s32 h);
extern void crash_screen_draw_glyph(s32 x, s32 y, s32 glyph);
extern void crash_screen_print(s32 x, s32 y, const char *fmt, ...);
extern void crash_screen_sleep(s32 ms);
extern void crash_screen_print_float_reg(s32 x, s32 y, s32 regNum, void *addr);
extern void crash_screen_print_fpcsr(u32 fpcsr);
extern void draw_crash_screen(OSThread *thread);
extern void thread2_crash_screen(UNUSED void *arg);
extern void crash_screen_set_framebuffer(u16 *framebuffer, s16 width, s16 height);
extern void crash_screen_init(void);
// src/game/ingame_menu.c
extern void create_dl_identity_matrix(void);
extern void create_dl_translation_matrix(s8 pushOp, f32 x, f32 y, f32 z);
extern void create_dl_rotation_matrix(s8 pushOp, f32 a, f32 x, f32 y, f32 z);
extern void create_dl_scale_matrix(s8 pushOp, f32 x, f32 y, f32 z);
extern void create_dl_ortho_matrix(void);
extern void render_generic_char(u8 c);
extern u8 *alloc_ia4_tex_from_i1(u8 *in, s16 width, s16 height);
extern void render_generic_char_at_pos(s16 xPos, s16 yPos, u8 c);
extern void render_lowercase_diacritic(s16 *xPos, s16 *yPos, u8 letter, u8 diacritic);
extern void render_uppercase_diacritic(s16 *xPos, s16 *yPos, u8 letter, u8 diacritic);
extern void print_generic_string(s16 x, s16 y, const u8 *str);
extern void print_hud_char_umlaut(s16 x, s16 y, u8 chr);
extern void print_hud_lut_string(s8 hudLUT, s16 x, s16 y, const u8 *str);
extern void print_menu_char_umlaut(s16 x, s16 y, u8 chr);
extern void print_menu_generic_string(s16 x, s16 y, const u8 *str);
extern void print_credits_string(s16 x, s16 y, const u8 *str);
extern void handle_menu_scrolling(s8 scrollDirection, s8 *currentIndex, s8 minIndex, s8 maxIndex);
extern s16 get_str_x_pos_from_center(s16 centerPos, u8 *str, UNUSED f32 scale);
extern s16 get_str_x_pos_from_center_scale(s16 centerPos, u8 *str, f32 scale);
extern s16 get_string_width(u8 *str);
extern void print_hud_my_score_coins(s32 useCourseCoinScore, s8 fileNum, s8 courseNum, s16 x, s16 y);
extern void print_hud_my_score_stars(s8 fileNum, s8 courseNum, s16 x, s16 y);
extern void int_to_str(s32 num, u8 *dst);
extern s16 get_dialog_id(void);
extern void create_dialog_box(s16 dialog);
extern void create_dialog_box_with_var(s16 dialog, s32 dialogVar);
extern void create_dialog_inverted_box(s16 dialog);
extern void create_dialog_box_with_response(s16 dialog);
extern void reset_dialog_render_state(void);
extern void render_dialog_box_type(struct DialogEntry *dialog, s8 linesPerBox);
extern void change_and_flash_dialog_text_color_lines(s8 colorMode, s8 lineNum);
extern void render_generic_dialog_char_at_pos(struct DialogEntry *dialog, s16 x, s16 y, u8 c);
extern void adjust_pos_and_print_period_char(s8 *xMatrix, s16 *linePos);
extern void render_dialog_lowercase_diacritic(struct DialogEntry *dialog, u8 chr, u8 diacritic);
extern void render_dialog_uppercase_diacritic(struct DialogEntry *dialog, u8 chr, u8 diacritic);
extern u32 ensure_nonnegative(s16 value);
extern void render_dialog_triangle_choice(void);
extern void render_dialog_string_color(s8 linesPerBox);
extern void render_dialog_entries(void);
extern void set_menu_mode(s16 mode);
extern void reset_cutscene_msg_fade(void);
extern void dl_rgba16_begin_cutscene_msg_fade(void);
extern void dl_rgba16_stop_cutscene_msg_fade(void);
extern u8 ascii_to_credits_char(u8 c);
extern void print_credits_str_ascii(s16 x, s16 y, const char *str);
extern void set_cutscene_message(s16 xOffset, s16 yOffset, s16 msgIndex, s16 msgDuration);
extern void do_cutscene_handler(void);
extern void print_peach_letter_message(void);
extern void render_hud_cannon_reticle(void);
extern void reset_red_coins_collected(void);
extern void change_dialog_camera_angle(void);
extern void shade_screen(void);
extern void print_animated_red_coin(s16 x, s16 y);
extern void render_pause_red_coins(void);
extern void render_pause_my_score_coins(void);
extern void render_pause_camera_options(s16 x, s16 y, s8 *index, s16 xIndex);
extern void render_pause_course_options(s16 x, s16 y, s8 *index, s16 yIndex);
extern void render_pause_castle_menu_box(s16 x, s16 y);
extern void highlight_last_course_complete_stars(void);
extern void print_hud_pause_colorful_str(void);
extern void render_pause_castle_course_stars(s16 x, s16 y, s16 fileNum, s16 courseNum);
extern void render_pause_castle_main_strings(s16 x, s16 y);
extern s16 render_pause_courses_and_castle(void);
extern void print_hud_course_complete_string(s8 str);
extern void print_hud_course_complete_coins(s16 x, s16 y);
extern void play_star_fanfare_and_flash_hud(s32 arg, u8 starNum);
extern void render_course_complete_lvl_info_and_hud_str(void);
extern s16 render_course_complete_screen(void);
extern s16 render_menus_and_dialogs();
// src/game/moving_texture.c
extern void *get_quad_collection_from_id(u32 id);
extern void movtex_change_texture_format(u32 quadCollectionId, Gfx **gfx);
extern void update_moving_texture_offset(s16 *movtexVerts, s32 attr);
extern void movtex_write_vertex_first(Vtx *vtx, s16 *movtexVerts, struct MovtexObject *c, s8 attrLayout);
// src/game/mario_actions_cutscene.c
extern s32 get_credits_str_width(char *str);
extern void print_displaying_credits_entry(void);
extern void bhv_end_peach_loop(void);
extern void bhv_end_toad_loop(void);
extern s32 geo_switch_peach_eyes(s32 run, struct GraphNode *node, UNUSED s32 a2);
extern s32 get_star_collection_dialog(struct MarioState *m);
extern void handle_save_menu(struct MarioState *m);
extern void cutscene_take_cap_off(struct MarioState *m);
extern void cutscene_put_cap_on(struct MarioState *m);
extern s32 mario_ready_to_speak(void);
extern s32 set_mario_npc_dialog(s32 actionArg);
extern s32 act_reading_npc_dialog(struct MarioState *m);
extern s32 act_waiting_for_dialog(struct MarioState *m);
extern s32 act_disappeared(struct MarioState *m);
extern s32 act_reading_automatic_dialog(struct MarioState *m);
extern s32 act_reading_sign(struct MarioState *m);
extern s32 act_debug_free_move(struct MarioState *m);
extern void general_star_dance_handler(struct MarioState *m, s32 isInWater);
extern s32 act_star_dance(struct MarioState *m);
extern s32 act_star_dance_water(struct MarioState *m);
extern s32 act_fall_after_star_grab(struct MarioState *m);
extern s32 common_death_handler(struct MarioState *m, s32 animation, s32 frameToDeathWarp);
extern s32 act_standing_death(struct MarioState *m);
extern s32 act_electrocution(struct MarioState *m);
extern s32 act_suffocation(struct MarioState *m);
extern s32 act_death_on_back(struct MarioState *m);
extern s32 act_death_on_stomach(struct MarioState *m);
extern s32 act_quicksand_death(struct MarioState *m);
extern s32 act_eaten_by_bubba(struct MarioState *m);
extern s32 launch_mario_until_land(struct MarioState *m, s32 endAction, s32 animation, f32 forwardVel);
extern s32 act_unlocking_key_door(struct MarioState *m);
extern s32 act_unlocking_star_door(struct MarioState *m);
extern s32 act_entering_star_door(struct MarioState *m);
extern s32 act_going_through_door(struct MarioState *m);
extern s32 act_warp_door_spawn(struct MarioState *m);
extern s32 act_emerge_from_pipe(struct MarioState *m);
extern s32 act_spawn_spin_airborne(struct MarioState *m);
extern s32 act_spawn_spin_landing(struct MarioState *m);
extern s32 act_exit_airborne(struct MarioState *m);
extern s32 act_falling_exit_airborne(struct MarioState *m);
extern s32 act_exit_land_save_dialog(struct MarioState *m);
extern s32 act_death_exit(struct MarioState *m);
extern s32 act_unused_death_exit(struct MarioState *m);
extern s32 act_falling_death_exit(struct MarioState *m);
extern s32 act_special_exit_airborne(struct MarioState *m);
extern s32 act_special_death_exit(struct MarioState *m);
extern s32 act_spawn_no_spin_airborne(struct MarioState *m);
extern s32 act_spawn_no_spin_landing(struct MarioState *m);
extern s32 act_bbh_enter_spin(struct MarioState *m);
extern s32 act_bbh_enter_jump(struct MarioState *m);
extern s32 act_teleport_fade_out(struct MarioState *m);
extern s32 act_teleport_fade_in(struct MarioState *m);
extern s32 act_shocked(struct MarioState *m);
extern s32 act_squished(struct MarioState *m);
extern s32 act_putting_on_cap(struct MarioState *m);
extern s32 act_head_stuck_in_ground(struct MarioState *m);
extern s32 act_butt_stuck_in_ground(struct MarioState *m);
extern s32 act_feet_stuck_in_ground(struct MarioState *m);
extern void generate_yellow_sparkles(s16 x, s16 y, s16 z, f32 radius);
extern s32 mario_execute_cutscene_action(struct MarioState *m);
// src/game/mario_actions_moving.c
extern s16 tilt_body_running(struct MarioState *m);
extern void play_step_sound(struct MarioState *m, s16 frame1, s16 frame2);
extern void align_with_floor(struct MarioState *m);
extern s32 begin_walking_action(struct MarioState *m, f32 forwardVel, u32 action, u32 actionArg);
extern void check_ledge_climb_down(struct MarioState *m);
extern void slide_bonk(struct MarioState *m, u32 fastAction, u32 slowAction);
extern s32 set_triple_jump_action(struct MarioState *m, UNUSED u32 action, UNUSED u32 actionArg);
extern void update_sliding_angle(struct MarioState *m, f32 accel, f32 lossFactor);
extern s32 update_sliding(struct MarioState *m, f32 stopSpeed);
extern void apply_slope_accel(struct MarioState *m);
extern s32 apply_landing_accel(struct MarioState *m, f32 frictionFactor);
extern void update_shell_speed(struct MarioState *m);
extern s32 apply_slope_decel(struct MarioState *m, f32 decelCoef);
extern s32 update_decelerating_speed(struct MarioState *m);
extern void update_walking_speed(struct MarioState *m);
extern s32 should_begin_sliding(struct MarioState *m);
extern s32 analog_stick_held_back(struct MarioState *m);
extern s32 check_ground_dive_or_punch(struct MarioState *m);
extern s32 begin_braking_action(struct MarioState *m);
extern void anim_and_audio_for_walk(struct MarioState *m);
extern void anim_and_audio_for_hold_walk(struct MarioState *m);
extern void anim_and_audio_for_heavy_walk(struct MarioState *m);
extern void push_or_sidle_wall(struct MarioState *m, Vec3f startPos);
extern void tilt_body_walking(struct MarioState *m, s16 startYaw);
extern void tilt_body_ground_shell(struct MarioState *m, s16 startYaw);
extern s32 act_walking(struct MarioState *m);
extern s32 act_move_punching(struct MarioState *m);
extern s32 act_hold_walking(struct MarioState *m);
extern s32 act_hold_heavy_walking(struct MarioState *m);
extern s32 act_turning_around(struct MarioState *m);
extern s32 act_finish_turning_around(struct MarioState *m);
extern s32 act_braking(struct MarioState *m);
extern s32 act_decelerating(struct MarioState *m);
extern s32 act_hold_decelerating(struct MarioState *m);
extern s32 act_riding_shell_ground(struct MarioState *m);
extern s32 act_crawling(struct MarioState *m);
extern s32 act_burning_ground(struct MarioState *m);
extern void tilt_body_butt_slide(struct MarioState *m);
extern void common_slide_action(struct MarioState *m, u32 endAction, u32 airAction, s32 animation);
extern s32 act_butt_slide(struct MarioState *m);
extern s32 act_hold_butt_slide(struct MarioState *m);
extern s32 act_crouch_slide(struct MarioState *m);
extern s32 act_slide_kick_slide(struct MarioState *m);
extern s32 stomach_slide_action(struct MarioState *m, u32 stopAction, u32 airAction, s32 animation);
extern s32 act_stomach_slide(struct MarioState *m);
extern s32 act_hold_stomach_slide(struct MarioState *m);
extern s32 act_dive_slide(struct MarioState *m);
extern s32 common_ground_knockback_action(struct MarioState *m, s32 animation, s32 arg2, s32 arg3, s32 arg4);
extern s32 act_hard_backward_ground_kb(struct MarioState *m);
extern s32 act_hard_forward_ground_kb(struct MarioState *m);
extern s32 act_backward_ground_kb(struct MarioState *m);
extern s32 act_forward_ground_kb(struct MarioState *m);
extern s32 act_soft_backward_ground_kb(struct MarioState *m);
extern s32 act_soft_forward_ground_kb(struct MarioState *m);
extern s32 act_ground_bonk(struct MarioState *m);
extern s32 act_death_exit_land(struct MarioState *m);
extern u32 common_landing_action(struct MarioState *m, s16 animation, u32 airAction);
extern s32 act_jump_land(struct MarioState *m);
extern s32 act_freefall_land(struct MarioState *m);
extern s32 act_side_flip_land(struct MarioState *m);
extern s32 act_hold_jump_land(struct MarioState *m);
extern s32 act_hold_freefall_land(struct MarioState *m);
extern s32 act_long_jump_land(struct MarioState *m);
extern s32 act_double_jump_land(struct MarioState *m);
extern s32 act_triple_jump_land(struct MarioState *m);
extern s32 act_backflip_land(struct MarioState *m);
extern s32 act_quicksand_jump_land(struct MarioState *m);
extern s32 act_hold_quicksand_jump_land(struct MarioState *m);
extern s32 check_common_moving_cancels(struct MarioState *m);
extern s32 mario_execute_moving_action(struct MarioState *m);
// src/game/object_collision.c
extern void clear_object_collision(struct Object *a);
extern void check_collision_in_list(struct Object *a, struct Object *b, struct Object *c);
extern void check_player_object_collision(void);
extern void check_pushable_object_collision(void);
extern void check_destructive_object_collision(void);
extern void detect_object_collisions(void);
// src/game/obj_behaviors.c
extern void set_yoshi_as_not_dead(void);
extern f32 absf_2(f32 f);
extern s32 obj_find_wall(f32 objNewX, f32 objY, f32 objNewZ, f32 objVelX, f32 objVelZ);
extern s32 turn_obj_away_from_steep_floor(struct Surface *objFloor, f32 floorY, f32 objVelX, f32 objVelZ);
extern void obj_orient_graph(struct Object *obj, f32 normalX, f32 normalY, f32 normalZ);
extern void calc_obj_friction(f32 *objFriction, f32 floor_nY);
extern void calc_new_obj_vel_and_pos_y(struct Surface *objFloor, f32 objFloorY, f32 objVelX, f32 objVelZ);
extern void obj_update_pos_vel_xz(void);
extern void obj_splash(s32 waterY, s32 objY);
extern s16 object_step(void);
extern s16 object_step_without_floor_orient(void);
extern void obj_move_xyz_using_fvel_and_yaw(struct Object *obj);
extern s32 is_point_within_radius_of_mario(f32 x, f32 y, f32 z, s32 dist);
extern s32 is_point_close_to_object(struct Object *obj, f32 x, f32 y, f32 z, s32 dist);
extern void set_object_visibility(struct Object *obj, s32 dist);
extern s32 obj_return_home_if_safe(struct Object *obj, f32 homeX, f32 y, f32 homeZ, s32 dist);
extern void obj_return_and_displace_home(struct Object *obj, f32 homeX, UNUSED f32 homeY, f32 homeZ, s32 baseDisp);
extern s32 obj_check_if_facing_toward_angle(u32 base, u32 goal, s16 range);
extern s32 obj_find_wall_displacement(Vec3f dist, f32 x, f32 y, f32 z, f32 radius);
extern void obj_spawn_yellow_coins(struct Object *obj, s8 nCoins);
extern s32 obj_flicker_and_disappear(struct Object *obj, s16 lifeSpan);
extern s8 current_mario_room_check(s16 room);
extern s16 trigger_obj_dialog_when_facing(s32 *inDialog, s16 dialogID, f32 dist, s32 actionArg);
extern void obj_check_floor_death(s16 collisionFlags, struct Surface *floor);
extern s32 obj_lava_death(void);
extern void spawn_orange_number(s8 behParam, s16 relX, s16 relY, s16 relZ);
extern s32 UNUSED debug_sequence_tracker(s16 debugInputSequence[]);
// src/game/platform_displacement.c
extern void update_mario_platform(void);
extern void get_mario_pos(f32 *x, f32 *y, f32 *z);
extern void set_mario_pos(f32 x, f32 y, f32 z);
extern void apply_platform_displacement(u32 isMario, struct Object *platform);
extern void apply_mario_platform_displacement(void);
extern void clear_mario_platform(void);
// src/game/game_init.c
extern void my_rdp_init(void);
extern void my_rsp_init(void);
extern void clear_z_buffer(void);
extern void display_frame_buffer(void);
extern void clear_frame_buffer(s32 color);
extern void clear_viewport(Vp *viewport, s32 color);
extern void draw_screen_borders(void);
extern void make_viewport_clip_rect(Vp *viewport);
extern void create_task_structure(void);
extern void init_render_image(void);
extern void end_master_display_list(void);
extern void draw_reset_bars(void);
extern void rendering_init(void);
extern void config_gfx_pool(void);
extern void display_and_vsync(void);
extern void adjust_analog_stick(struct Controller *controller);
extern void run_demo_inputs(void);
extern void read_controller_inputs(void);
extern void init_controllers(void);
extern void setup_game_memory(void);
extern void thread5_game_loop(UNUSED void *arg);
// src/game/mario.c
extern s32 is_anim_at_end(struct MarioState *m);
extern s32 is_anim_past_end(struct MarioState *m);
extern s16 set_mario_animation(struct MarioState *m, s32 targetAnimID);
extern s16 set_mario_anim_with_accel(struct MarioState *m, s32 targetAnimID, s32 accel);
extern void set_anim_to_frame(struct MarioState *m, s16 animFrame);
extern s32 is_anim_past_frame(struct MarioState *m, s16 animFrame);
extern s16 find_mario_anim_flags_and_translation(struct Object *obj, s32 yaw, Vec3s translation);
extern void update_mario_pos_for_anim(struct MarioState *m);
extern s16 return_mario_anim_y_translation(struct MarioState *m);
extern void play_sound_if_no_flag(struct MarioState *m, u32 soundBits, u32 flags);
extern void play_mario_jump_sound(struct MarioState *m);
extern void adjust_sound_for_speed(struct MarioState *m);
extern void play_sound_and_spawn_particles(struct MarioState *m, u32 soundBits, u32 waveParticleType);
extern void play_mario_action_sound(struct MarioState *m, u32 soundBits, u32 waveParticleType);
extern void play_mario_landing_sound(struct MarioState *m, u32 soundBits);
extern void play_mario_landing_sound_once(struct MarioState *m, u32 soundBits);
extern void play_mario_heavy_landing_sound(struct MarioState *m, u32 soundBits);
extern void play_mario_heavy_landing_sound_once(struct MarioState *m, u32 soundBits);
extern void play_mario_sound(struct MarioState *m, s32 actionSound, s32 marioSound);
extern void mario_set_forward_vel(struct MarioState *m, f32 forwardVel);
extern s32 mario_get_floor_class(struct MarioState *m);
extern u32 mario_get_terrain_sound_addend(struct MarioState *m);
extern f32 vec3f_find_ceil(Vec3f pos, f32 height, struct Surface **ceil);
extern s32 mario_facing_downhill(struct MarioState *m, s32 turnYaw);
extern u32 mario_floor_is_slippery(struct MarioState *m);
extern s32 mario_floor_is_slope(struct MarioState *m);
extern s32 mario_floor_is_steep(struct MarioState *m);
extern f32 find_floor_height_relative_polar(struct MarioState *m, s16 angleFromMario, f32 distFromMario);
extern s16 find_floor_slope(struct MarioState *m, s16 yawOffset);
extern void update_mario_sound_and_camera(struct MarioState *m);
extern void set_steep_jump_action(struct MarioState *m);
extern u32 set_mario_action(struct MarioState *m, u32 action, u32 actionArg);
extern s32 set_jump_from_landing(struct MarioState *m);
extern s32 set_jumping_action(struct MarioState *m, u32 action, u32 actionArg);
extern s32 drop_and_set_mario_action(struct MarioState *m, u32 action, u32 actionArg);
extern s32 hurt_and_set_mario_action(struct MarioState *m, u32 action, u32 actionArg, s16 hurtCounter);
extern s32 check_common_action_exits(struct MarioState *m);
extern s32 check_common_hold_action_exits(struct MarioState *m);
extern s32 transition_submerged_to_walking(struct MarioState *m);
extern s32 set_water_plunge_action(struct MarioState *m);
extern void squish_mario_model(struct MarioState *m);
extern void debug_print_speed_action_normal(struct MarioState *m);
extern void update_mario_button_inputs(struct MarioState *m);
extern void update_mario_joystick_inputs(struct MarioState *m);
extern void update_mario_geometry_inputs(struct MarioState *m);
extern void update_mario_inputs(struct MarioState *m);
extern void set_submerged_cam_preset_and_spawn_bubbles(struct MarioState *m);
extern void update_mario_health(struct MarioState *m);
extern void update_mario_info_for_cam(struct MarioState *m);
extern void mario_reset_bodystate(struct MarioState *m);
extern void sink_mario_in_quicksand(struct MarioState *m);
extern u32 update_and_return_cap_flags(struct MarioState *m);
extern void mario_update_hitbox_and_cap_model(struct MarioState *m);
extern void func_sh_8025574C(void);
extern s32 execute_mario_action(UNUSED struct Object *o);
extern void init_mario(void);
extern void init_mario_from_save_file(void);
// src/game/shadow.c
extern void rotate_rectangle(f32 *newZ, f32 *newX, f32 oldZ, f32 oldX);
extern f32 atan2_deg(f32 a, f32 b);
extern f32 scale_shadow_with_distance(f32 initial, f32 distFromFloor);
extern f32 disable_shadow_with_distance(f32 shadowScale, f32 distFromFloor);
extern u8 dim_shadow_with_distance(u8 solidity, f32 distFromFloor);
extern f32 get_water_level_below_shadow(struct Shadow *s);
extern s8 init_shadow(struct Shadow *s, f32 xPos, f32 yPos, f32 zPos, s16 shadowScale, u8 overwriteSolidity);
extern void get_texture_coords_9_vertices(s8 vertexNum, s16 *textureX, s16 *textureY);
extern void get_texture_coords_4_vertices(s8 vertexNum, s16 *textureX, s16 *textureY);
extern f32 extrapolate_vertex_y_position(struct Shadow s, f32 vtxX, f32 vtxZ);
extern void get_vertex_coords(s8 index, s8 shadowVertexType, s8 *xCoord, s8 *zCoord);
extern s16 floor_local_tilt(struct Shadow s, f32 vtxX, f32 vtxY, f32 vtxZ);
extern void make_shadow_vertex(Vtx *vertices, s8 index, struct Shadow s, s8 shadowVertexType);
extern void add_shadow_to_display_list(Gfx *displayListHead, Vtx *verts, s8 shadowVertexType, s8 shadowShape);
extern s8 correct_shadow_solidity_for_animations(s32 isLuigi, u8 initialSolidity, struct Shadow *shadow);
extern void correct_lava_shadow_height(struct Shadow *s);
extern s32 get_shadow_height_solidity(f32 xPos, f32 yPos, f32 zPos, f32 *shadowHeight, u8 *solidity);
// src/game/mario_actions_stationary.c
extern s32 check_common_idle_cancels(struct MarioState *m);
extern s32 check_common_hold_idle_cancels(struct MarioState *m);
extern s32 act_idle(struct MarioState *m);
extern void play_anim_sound(struct MarioState *m, u32 actionState, s32 animFrame, u32 sound);
extern s32 act_start_sleeping(struct MarioState *m);
extern s32 act_sleeping(struct MarioState *m);
extern s32 act_waking_up(struct MarioState *m);
extern s32 act_shivering(struct MarioState *m);
extern s32 act_coughing(struct MarioState *m);
extern s32 act_hold_idle(struct MarioState *m);
extern s32 act_hold_heavy_idle(struct MarioState *m);
extern s32 act_standing_against_wall(struct MarioState *m);
extern s32 act_in_quicksand(struct MarioState *m);
extern s32 act_crouching(struct MarioState *m);
extern s32 act_panting(struct MarioState *m);
extern s32 act_hold_panting_unused(struct MarioState *m);
extern void stopping_step(struct MarioState *m, s32 animID, u32 action);
extern s32 act_braking_stop(struct MarioState *m);
extern s32 act_butt_slide_stop(struct MarioState *m);
extern s32 act_hold_butt_slide_stop(struct MarioState *m);
extern s32 act_slide_kick_slide_stop(struct MarioState *m);
extern s32 act_start_crouching(struct MarioState *m);
extern s32 act_stop_crouching(struct MarioState *m);
extern s32 act_start_crawling(struct MarioState *m);
extern s32 act_stop_crawling(struct MarioState *m);
extern s32 act_shockwave_bounce(struct MarioState *m);
extern s32 landing_step(struct MarioState *m, s32 arg1, u32 action);
extern s32 check_common_landing_cancels(struct MarioState *m, u32 action);
extern s32 act_jump_land_stop(struct MarioState *m);
extern s32 act_double_jump_land_stop(struct MarioState *m);
extern s32 act_side_flip_land_stop(struct MarioState *m);
extern s32 act_freefall_land_stop(struct MarioState *m);
extern s32 act_triple_jump_land_stop(struct MarioState *m);
extern s32 act_backflip_land_stop(struct MarioState *m);
extern s32 act_lava_boost_land(struct MarioState *m);
extern s32 act_long_jump_land_stop(struct MarioState *m);
extern s32 act_hold_jump_land_stop(struct MarioState *m);
extern s32 act_hold_freefall_land_stop(struct MarioState *m);
extern s32 act_air_throw_land(struct MarioState *m);
extern s32 act_twirl_land(struct MarioState *m);
extern s32 act_ground_pound_land(struct MarioState *m);
extern s32 act_first_person(struct MarioState *m);
extern s32 check_common_stationary_cancels(struct MarioState *m);
extern s32 mario_execute_stationary_action(struct MarioState *m);
// src/game/thread6.c
extern void init_rumble_pak_scheduler_queue(void);
extern void block_until_rumble_pak_free(void);
extern void release_rumble_pak_control(void);
extern void queue_rumble_data(s16 a0, s16 a1);
extern void func_sh_8024C89C(s16 a0);
extern u8 is_rumble_finished_and_queue_empty(void);
extern void reset_rumble_timers(void);
extern void reset_rumble_timers_2(s32 a0);
extern void func_sh_8024CA04(void);
extern void cancel_rumble(void);
extern void create_thread_6(void);
extern void rumble_thread_update_vi(void);
// src/game/mario_actions_submerged.c
extern s32 mario_execute_submerged_action(struct MarioState *m);
// src/game/mario_actions_object.c
extern void animated_stationary_ground_step(struct MarioState *m, s32 animation, u32 endAction);
extern s32 mario_update_punch_sequence(struct MarioState *m);
extern s32 act_punching(struct MarioState *m);
extern s32 act_picking_up(struct MarioState *m);
extern s32 act_dive_picking_up(struct MarioState *m);
extern s32 act_placing_down(struct MarioState *m);
extern s32 act_throwing(struct MarioState *m);
extern s32 act_heavy_throw(struct MarioState *m);
extern s32 act_stomach_slide_stop(struct MarioState *m);
extern s32 act_picking_up_bowser(struct MarioState *m);
extern s32 act_holding_bowser(struct MarioState *m);
extern s32 act_releasing_bowser(struct MarioState *m);
extern s32 check_common_object_cancels(struct MarioState *m);
extern s32 mario_execute_object_action(struct MarioState *m);
// src/game/memory.c
extern void *get_segment_base_addr(s32 segment);
extern void *segmented_to_virtual(const void *addr);
extern void *virtual_to_segmented(u32 segment, const void *addr);
extern void move_segment_table_to_dmem(void);
extern void *segmented_to_virtual(const void *addr);
extern void *virtual_to_segmented(u32 segment, const void *addr);
extern void move_segment_table_to_dmem(void);
extern void main_pool_init(void *start, void *end);
extern void *main_pool_alloc(u32 size, u32 side);
extern u32 main_pool_free(void *addr);
extern void *main_pool_realloc(void *addr, u32 size);
extern u32 main_pool_available(void);
extern u32 main_pool_push_state(void);
extern u32 main_pool_pop_state(void);
extern void *load_segment(s32 segment, u8 *srcStart, u8 *srcEnd, u32 side);
extern void *load_to_fixed_pool_addr(u8 *destAddr, u8 *srcStart, u8 *srcEnd);
extern void *load_segment_decompress(s32 segment, u8 *srcStart, u8 *srcEnd);
extern void *load_segment_decompress_heap(u32 segment, u8 *srcStart, u8 *srcEnd);
extern void load_engine_code_segment(void);
extern void *alloc_only_pool_alloc(struct AllocOnlyPool *pool, s32 size);
extern void *mem_pool_alloc(struct MemoryPool *pool, u32 size);
extern void mem_pool_free(struct MemoryPool *pool, void *addr);
extern void *alloc_display_list(u32 size);
extern void func_80278A78(struct MarioAnimation *a, void *b, struct Animation *target);
extern s32 load_patchable_table(struct MarioAnimation *a, u32 index);
// src/game/mario_actions_automatic.c
extern void add_tree_leaf_particles(struct MarioState *m);
extern void play_climbing_sounds(struct MarioState *m, s32 b);
extern s32 set_pole_position(struct MarioState *m, f32 offsetY);
extern s32 act_holding_pole(struct MarioState *m);
extern s32 act_climbing_pole(struct MarioState *m);
extern s32 act_grab_pole_slow(struct MarioState *m);
extern s32 act_grab_pole_fast(struct MarioState *m);
extern s32 act_top_of_pole_transition(struct MarioState *m);
extern s32 act_top_of_pole(struct MarioState *m);
extern s32 perform_hanging_step(struct MarioState *m, Vec3f nextPos);
extern s32 update_hang_moving(struct MarioState *m);
extern void update_hang_stationary(struct MarioState *m);
extern s32 act_start_hanging(struct MarioState *m);
extern s32 act_hanging(struct MarioState *m);
extern s32 act_hang_moving(struct MarioState *m);
extern s32 let_go_of_ledge(struct MarioState *m);
extern void climb_up_ledge(struct MarioState *m);
extern void update_ledge_climb_camera(struct MarioState *m);
extern void update_ledge_climb(struct MarioState *m, s32 animation, u32 endAction);
extern s32 act_ledge_grab(struct MarioState *m);
extern s32 act_ledge_climb_slow(struct MarioState *m);
extern s32 act_ledge_climb_down(struct MarioState *m);
extern s32 act_ledge_climb_fast(struct MarioState *m);
extern s32 act_grabbed(struct MarioState *m);
extern s32 act_in_cannon(struct MarioState *m);
extern s32 act_tornado_twirling(struct MarioState *m);
extern s32 check_common_automatic_cancels(struct MarioState *m);
extern s32 mario_execute_automatic_action(struct MarioState *m);
// src/game/geo_misc.c
extern void make_vertex(Vtx *vtx, s32 n, s16 x, s16 y, s16 z, s16 tx, s16 ty, u8 r, u8 g, u8 b, u8 a);
extern s16 round_float(f32 num);
// src/game/obj_behaviors_2.c
// src/game/interaction.c
extern u32 get_mario_cap_flag(struct Object *capObject);
extern u32 object_facing_mario(struct MarioState *m, struct Object *o, s16 angleRange);
extern s16 mario_obj_angle_to_object(struct MarioState *m, struct Object *o);
extern u32 determine_interaction(struct MarioState *m, struct Object *o);
extern u32 attack_object(struct Object *o, s32 interaction);
extern void mario_stop_riding_object(struct MarioState *m);
extern void mario_grab_used_object(struct MarioState *m);
extern void mario_drop_held_object(struct MarioState *m);
extern void mario_throw_held_object(struct MarioState *m);
extern void mario_stop_riding_and_holding(struct MarioState *m);
extern u32 does_mario_have_hat(struct MarioState *m);
extern void mario_blow_off_cap(struct MarioState *m, f32 capSpeed);
extern u32 mario_lose_cap_to_enemy(u32 arg);
extern void mario_retrieve_cap(void);
extern u32 able_to_grab_object(struct MarioState *m, UNUSED struct Object *o);
extern u32 mario_check_object_grab(struct MarioState *m);
extern u32 bully_knock_back_mario(struct MarioState *mario);
extern void bounce_off_object(struct MarioState *m, struct Object *o, f32 velY);
extern void hit_object_from_below(struct MarioState *m, UNUSED struct Object *o);
extern u32 determine_knockback_action(struct MarioState *m, UNUSED s32 arg);
extern void push_mario_out_of_object(struct MarioState *m, struct Object *o, f32 padding);
extern void bounce_back_from_attack(struct MarioState *m, u32 interaction);
extern u32 should_push_or_pull_door(struct MarioState *m, struct Object *o);
extern u32 take_damage_from_interact_object(struct MarioState *m);
extern u32 take_damage_and_knock_back(struct MarioState *m, struct Object *o);
extern void reset_mario_pitch(struct MarioState *m);
extern u32 interact_coin(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_water_ring(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_star_or_key(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_bbh_entrance(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_warp(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_warp_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 get_door_save_file_flag(struct Object *door);
extern u32 interact_door(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_cannon_base(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_igloo_barrier(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_tornado(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_whirlpool(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_strong_wind(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_flame(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_snufit_bullet(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_clam_or_bubba(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_bully(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_shock(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_mr_blizzard(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_hit_from_below(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_bounce_top(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_unknown_08(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_damage(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_breakable(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_koopa_shell(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 check_object_grab_mario(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_pole(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_hoot(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_cap(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern u32 interact_grabbable(struct MarioState *m, u32 interactType, struct Object *o);
extern u32 mario_can_talk(struct MarioState *m, u32 arg);
extern u32 check_read_sign(struct MarioState *m, struct Object *o);
extern u32 check_npc_talk(struct MarioState *m, struct Object *o);
extern u32 interact_text(struct MarioState *m, UNUSED u32 interactType, struct Object *o);
extern void check_kick_or_punch_wall(struct MarioState *m);
extern void mario_process_interactions(struct MarioState *m);
extern void check_death_barrier(struct MarioState *m);
extern void check_lava_boost(struct MarioState *m);
extern void pss_begin_slide(UNUSED struct MarioState *m);
extern void pss_end_slide(struct MarioState *m);
extern void mario_handle_special_floors(struct MarioState *m);
// src/game/print.c
extern s32 int_pow(s32 n, s32 exponent);
extern void format_integer(s32 n, s32 base, char *dest, s32 *totalLength, u8 width, s8 zeroPad);
extern void parse_width_field(const char *str, s32 *srcIndex, u8 *width, s8 *zeroPad);
extern void print_text_fmt_int(s32 x, s32 y, const char *str, s32 n);
extern void print_text(s32 x, s32 y, const char *str);
extern void print_text_centered(s32 x, s32 y, const char *str);
extern s8 char_to_glyph_index(char c);
extern void add_glyph_texture(s8 glyphIndex);
extern void clip_to_bounds(s32 *x, s32 *y);
extern void render_textrect(s32 x, s32 y, s32 pos);
extern void render_text_labels(void);
// src/game/level_geo.c
// src/game/rendering_graph_node.c
extern void geo_set_animation_globals(struct GraphNodeObject_sub *node, s32 hasAnimation);
extern void geo_process_held_object(struct GraphNodeHeldObject *node);
extern void geo_try_process_children(struct GraphNode *node);
extern void geo_process_node_and_siblings(struct GraphNode *firstNode);
extern void geo_process_root(struct GraphNodeRoot *node, Vp *b, Vp *c, s32 clearColor);
// src/game/envfx_snow.c
extern s32 envfx_init_snow(s32 mode);
extern void envfx_update_snowflake_count(s32 mode, Vec3s marioPos);
extern void envfx_cleanup_snow(void *snowParticleArray);
extern void orbit_from_positions(Vec3s from, Vec3s to, s16 *radius, s16 *pitch, s16 *yaw);
extern void pos_from_orbit(Vec3s origin, Vec3s result, s16 radius, s16 pitch, s16 yaw);
extern s32 envfx_is_snowflake_alive(s32 index, s32 snowCylinderX, s32 snowCylinderY, s32 snowCylinderZ);
extern void envfx_update_snow_normal(s32 snowCylinderX, s32 snowCylinderY, s32 snowCylinderZ);
extern void envfx_update_snow_blizzard(s32 snowCylinderX, s32 snowCylinderY, s32 snowCylinderZ);
extern void envfx_update_snow_water(s32 snowCylinderX, s32 snowCylinderY, s32 snowCylinderZ);
extern void rotate_triangle_vertices(Vec3s vertex1, Vec3s vertex2, Vec3s vertex3, s16 pitch, s16 yaw);
extern void append_snowflake_vertex_buffer(Gfx *gfx, s32 index, Vec3s vertex1, Vec3s vertex2, Vec3s vertex3);
// src/game/object_list_processor.c
extern void copy_mario_state_to_object(void);
extern void spawn_particle(u32 activeParticleFlag, s16 model, const BehaviorScript *behavior);
extern void bhv_mario_update(void);
extern s32 update_objects_starting_at(struct ObjectNode *objList, struct ObjectNode *firstObj);
extern s32 update_objects_during_time_stop(struct ObjectNode *objList, struct ObjectNode *firstObj);
extern s32 update_objects_in_list(struct ObjectNode *objList);
extern s32 unload_deactivated_objects_in_list(struct ObjectNode *objList);
extern void set_object_respawn_info_bits(struct Object *obj, u8 bits);
extern void unload_objects_from_area(UNUSED s32 unused, s32 areaIndex);
extern void spawn_objects_from_info(UNUSED s32 unused, struct SpawnInfo *spawnInfo);
extern void stub_obj_list_processor_1(void);
extern void clear_objects(void);
extern void update_terrain_objects(void);
extern void update_non_terrain_objects(void);
extern void unload_deactivated_objects(void);
extern void update_objects(UNUSED s32 unused);
// src/game/paintings.c
extern void stop_other_paintings(s16 *idptr, struct Painting *paintingGroup[]);
extern f32 painting_mario_y(struct Painting *painting);
extern f32 painting_mario_z(struct Painting *painting);
extern f32 painting_ripple_y(struct Painting *painting, s8 ySource);
extern f32 painting_nearest_4th(struct Painting *painting);
extern f32 painting_mario_x(struct Painting *painting);
extern f32 painting_ripple_x(struct Painting *painting, s8 xSource);
extern void wall_painting_proximity_idle(struct Painting *painting, struct Painting *paintingGroup[]);
extern void wall_painting_proximity_rippling(struct Painting *painting, struct Painting *paintingGroup[]);
extern void wall_painting_continuous_idle(struct Painting *painting, struct Painting *paintingGroup[]);
extern void wall_painting_continuous_rippling(struct Painting *painting, struct Painting *paintingGroup[]);
extern void floor_painting_proximity_idle(struct Painting *painting, struct Painting *paintingGroup[]);
extern void floor_painting_proximity_rippling(struct Painting *painting, struct Painting *paintingGroup[]);
extern void floor_painting_continuous_idle(struct Painting *painting, struct Painting *paintingGroup[]);
extern void floor_painting_continuous_rippling(struct Painting *painting, struct Painting *paintingGroup[]);
extern void painting_update_floors(struct Painting *painting);
extern void painting_update_ripple_state(struct Painting *painting);
extern s16 calculate_ripple_at_point(struct Painting *painting, f32 posX, f32 posY);
extern s16 ripple_if_movable(struct Painting *painting, s16 movable, s16 posX, s16 posY);
extern void painting_generate_mesh(struct Painting *painting, s16 *mesh, s16 numTris);
extern void painting_calculate_triangle_normals(s16 *mesh, s16 numVtx, s16 numTris);
extern s8 normalize_component(f32 comp);
extern void painting_average_vertex_normals(s16 *neighborTris, s16 numVtx);
extern void reset_painting(struct Painting *painting);
extern void move_ddd_painting(struct Painting *painting, f32 frontPos, f32 backPos, f32 speed);
extern void set_painting_layer(struct GraphNodeGenerated *gen, struct Painting *painting);
extern void wall_painting_update(struct Painting *painting, struct Painting *paintingGroup[]);
extern void floor_painting_update(struct Painting *painting, struct Painting *paintingGroup[]);
// src/game/profiler.c
extern void profiler_log_thread5_time(enum ProfilerGameEvent eventID);
extern void profiler_log_thread4_time(void);
extern void profiler_log_gfx_time(enum ProfilerGfxEvent eventID);
extern void profiler_log_vblank_time(void);
extern void draw_profiler_bar(OSTime clockBase, OSTime clockStart, OSTime clockEnd, s16 posY, u16 color);
extern void draw_reference_profiler_bars(void);
extern void draw_profiler_mode_1(void);
extern void draw_profiler_mode_0(void);
extern void draw_profiler(void);
// src/game/envfx_bubbles.c
extern s32 particle_is_laterally_close(s32 index, s32 x, s32 z, s32 distance);
extern s32 random_flower_offset(void);
extern void envfx_update_flower(Vec3s centerPos);
extern void envfx_set_lava_bubble_position(s32 index, Vec3s centerPos);
extern void envfx_update_lava(Vec3s centerPos);
extern void envfx_rotate_around_whirlpool(s32 *x, s32 *y, s32 *z);
extern s32 envfx_is_whirlpool_bubble_alive(s32 index);
extern void envfx_update_whirlpool(void);
extern s32 envfx_is_jestream_bubble_alive(s32 index);
extern void envfx_update_jetstream(void);
extern s32 envfx_init_bubble(s32 mode);
extern void envfx_bubbles_update_switch(s32 mode, Vec3s camTo, Vec3s vertex1, Vec3s vertex2, Vec3s vertex3);
extern void envfx_set_bubble_texture(s32 mode, s16 index);
extern void envfx_set_max_bubble_particles(s32 mode);
// src/game/object_helpers.c
extern void obj_update_pos_from_parent_transformation(Mat4 a0, struct Object *a1);
extern void obj_apply_scale_to_matrix(struct Object *obj, Mat4 dst, Mat4 src);
extern void create_transformation_from_matrices(Mat4 a0, Mat4 a1, Mat4 a2);
extern void obj_set_held_state(struct Object *obj, const BehaviorScript *heldBehavior);
extern f32 lateral_dist_between_objects(struct Object *obj1, struct Object *obj2);
extern f32 dist_between_objects(struct Object *obj1, struct Object *obj2);
extern void cur_obj_forward_vel_approach_upward(f32 target, f32 increment);
extern s32 approach_f32_signed(f32 *value, f32 target, f32 increment);
extern f32 approach_f32_symmetric(f32 value, f32 target, f32 increment);
extern s16 approach_s16_symmetric(s16 value, s16 target, s16 increment);
extern s32 cur_obj_rotate_yaw_toward(s16 target, s16 increment);
extern s16 obj_angle_to_object(struct Object *obj1, struct Object *obj2);
extern s16 obj_turn_toward_object(struct Object *obj, struct Object *target, s16 angleIndex, s16 turnAmount);
extern void obj_set_parent_relative_pos(struct Object *obj, s16 relX, s16 relY, s16 relZ);
extern void obj_set_pos(struct Object *obj, s16 x, s16 y, s16 z);
extern void obj_set_angle(struct Object *obj, s16 pitch, s16 yaw, s16 roll);
extern void cur_obj_move_using_vel(void);
extern void obj_copy_graph_y_offset(struct Object *dst, struct Object *src);
extern void obj_copy_pos_and_angle(struct Object *dst, struct Object *src);
extern void obj_copy_pos(struct Object *dst, struct Object *src);
extern void obj_copy_angle(struct Object *dst, struct Object *src);
extern void obj_set_gfx_pos_from_pos(struct Object *obj);
extern void obj_init_animation(struct Object *obj, s32 animIndex);
extern void linear_mtxf_mul_vec3f(Mat4 m, Vec3f dst, Vec3f v);
extern void linear_mtxf_transpose_mul_vec3f(Mat4 m, Vec3f dst, Vec3f v);
extern void obj_apply_scale_to_transform(struct Object *obj);
extern void obj_copy_scale(struct Object *dst, struct Object *src);
extern void obj_scale_xyz(struct Object *obj, f32 xScale, f32 yScale, f32 zScale);
extern void obj_scale(struct Object *obj, f32 scale);
extern void cur_obj_scale(f32 scale);
extern void cur_obj_init_animation(s32 animIndex);
extern void cur_obj_init_animation_with_sound(s32 animIndex);
extern void cur_obj_init_animation_with_accel_and_sound(s32 animIndex, f32 accel);
extern void obj_init_animation_with_sound(struct Object *obj, const struct Animation * const* animations, s32 animIndex);
extern void cur_obj_enable_rendering_and_become_tangible(struct Object *obj);
extern void cur_obj_enable_rendering(void);
extern void cur_obj_disable_rendering_and_become_intangible(struct Object *obj);
extern void cur_obj_disable_rendering(void);
extern void cur_obj_unhide(void);
extern void cur_obj_hide(void);
extern void cur_obj_set_pos_relative(struct Object *other, f32 dleft, f32 dy, f32 dforward);
extern void cur_obj_set_pos_relative_to_parent(f32 dleft, f32 dy, f32 dforward);
extern void cur_obj_enable_rendering_2(void);
extern void cur_obj_unused_init_on_floor(void);
extern void obj_set_face_angle_to_move_angle(struct Object *obj);
extern u32 get_object_list_from_behavior(const BehaviorScript *behavior);
extern f32 cur_obj_dist_to_nearest_object_with_behavior(const BehaviorScript *behavior);
extern s32 count_unimportant_objects(void);
extern s32 count_objects_with_behavior(const BehaviorScript *behavior);
extern void cur_obj_change_action(s32 action);
extern void cur_obj_set_vel_from_mario_vel(f32 f12, f32 f14);
extern s32 cur_obj_check_if_near_animation_end(void);
extern s32 cur_obj_check_if_at_animation_end(void);
extern s32 cur_obj_check_anim_frame(s32 frame);
extern s32 cur_obj_check_anim_frame_in_range(s32 startFrame, s32 rangeLength);
extern s32 cur_obj_check_frame_prior_current_frame(s16 *a0);
extern s32 mario_is_in_air_action(void);
extern s32 mario_is_dive_sliding(void);
extern void cur_obj_set_y_vel_and_animation(f32 sp18, s32 sp1C);
extern void cur_obj_unrender_and_reset_state(s32 sp18, s32 sp1C);
extern void cur_obj_get_thrown_or_placed(f32 forwardVel, f32 velY, s32 thrownAction);
extern void cur_obj_get_dropped(void);
extern void cur_obj_set_model(s32 modelID);
extern void mario_set_flag(s32 flag);
extern s32 cur_obj_clear_interact_status_flag(s32 flag);
extern void obj_mark_for_deletion(struct Object *obj);
extern void cur_obj_disable(void);
extern void cur_obj_become_intangible(void);
extern void cur_obj_become_tangible(void);
extern void obj_become_tangible(struct Object *obj);
extern void cur_obj_update_floor_height(void);
extern void cur_obj_apply_drag_xz(f32 dragStrength);
extern void cur_obj_move_y(f32 gravity, f32 bounciness, f32 buoyancy);
extern void cur_obj_unused_resolve_wall_collisions(f32 offsetY, f32 radius);
extern s16 abs_angle_diff(s16 x0, s16 x1);
extern void cur_obj_move_xz_using_fvel_and_yaw(void);
extern void cur_obj_move_y_with_terminal_vel(void);
extern void cur_obj_compute_vel_xz(void);
extern f32 increment_velocity_toward_range(f32 value, f32 center, f32 zeroThreshold, f32 increment);
extern s32 obj_check_if_collided_with_object(struct Object *obj1, struct Object *obj2);
extern void cur_obj_set_behavior(const BehaviorScript *behavior);
extern void obj_set_behavior(struct Object *obj, const BehaviorScript *behavior);
extern s32 cur_obj_has_behavior(const BehaviorScript *behavior);
extern s32 obj_has_behavior(struct Object *obj, const BehaviorScript *behavior);
extern f32 cur_obj_lateral_dist_from_mario_to_home(void);
extern f32 cur_obj_lateral_dist_to_home(void);
extern s32 cur_obj_outside_home_square(f32 halfLength);
extern s32 cur_obj_outside_home_rectangle(f32 minX, f32 maxX, f32 minZ, f32 maxZ);
extern void cur_obj_set_pos_to_home(void);
extern void cur_obj_set_pos_to_home_and_stop(void);
extern void cur_obj_shake_y(f32 amount);
extern void cur_obj_start_cam_event(UNUSED struct Object *obj, s32 cameraEvent);
extern void set_mario_interact_hoot_if_in_range(UNUSED s32 sp0, UNUSED s32 sp4, f32 sp8);
extern void obj_set_billboard(struct Object *obj);
extern void cur_obj_set_hitbox_radius_and_height(f32 radius, f32 height);
extern void cur_obj_set_hurtbox_radius_and_height(f32 radius, f32 height);
extern void obj_spawn_loot_blue_coins(struct Object *obj, s32 numCoins, f32 sp28, s16 posJitter);
extern void obj_spawn_loot_yellow_coins(struct Object *obj, s32 numCoins, f32 sp28);
extern void cur_obj_spawn_loot_coin_at_mario_pos(void);
extern f32 cur_obj_abs_y_dist_to_home(void);
extern s32 cur_obj_advance_looping_anim(void);
extern s32 cur_obj_resolve_wall_collisions(void);
extern void cur_obj_update_floor_and_walls(void);
extern void cur_obj_move_standard(s16 steepSlopeAngleDegrees);
extern void cur_obj_move_using_vel_and_gravity(void);
extern void cur_obj_move_using_fvel_and_gravity(void);
extern s16 cur_obj_angle_to_home(void);
extern void obj_set_gfx_pos_at_obj_pos(struct Object *obj1, struct Object *obj2);
extern void obj_translate_local(struct Object *obj, s16 posIndex, s16 localTranslateIndex);
extern void obj_build_transform_from_pos_and_angle(struct Object *obj, s16 posIndex, s16 angleIndex);
extern void obj_set_throw_matrix_from_transform(struct Object *obj);
extern void obj_build_transform_relative_to_parent(struct Object *obj);
extern void obj_create_transform_from_self(struct Object *obj);
extern void cur_obj_rotate_move_angle_using_vel(void);
extern void cur_obj_rotate_face_angle_using_vel(void);
extern void cur_obj_set_face_angle_to_move_angle(void);
extern s32 cur_obj_follow_path(UNUSED s32 unusedArg);
extern void chain_segment_init(struct ChainSegment *segment);
extern f32 random_f32_around_zero(f32 diameter);
extern void obj_scale_random(struct Object *obj, f32 rangeLength, f32 minScale);
extern void obj_translate_xyz_random(struct Object *obj, f32 rangeLength);
extern void obj_translate_xz_random(struct Object *obj, f32 rangeLength);
extern void cur_obj_set_pos_via_transform(void);
extern s16 cur_obj_reflect_move_angle_off_wall(void);
extern void cur_obj_spawn_particles(struct SpawnParticlesInfo *info);
extern void obj_set_hitbox(struct Object *obj, struct ObjectHitbox *hitbox);
extern s32 signum_positive(s32 x);
extern f32 absf(f32 x);
extern s32 absi(s32 a0);
extern s32 cur_obj_wait_then_blink(s32 timeUntilBlinking, s32 numBlinks);
extern s32 cur_obj_is_mario_ground_pounding_platform(void);
extern void spawn_mist_particles(void);
extern void spawn_mist_particles_with_sound(u32 sp18);
extern void cur_obj_push_mario_away(f32 radius);
extern void cur_obj_push_mario_away_from_cylinder(f32 radius, f32 extentY);
extern void bhv_dust_smoke_loop(void);
extern s32 cur_obj_set_direction_table(s8 *a0);
extern s32 cur_obj_progress_direction_table(void);
extern void stub_obj_helpers_3(UNUSED s32 sp0, UNUSED s32 sp4);
extern void cur_obj_scale_over_time(s32 a0, s32 a1, f32 sp10, f32 sp14);
extern void cur_obj_set_pos_to_home_with_debug(void);
extern void stub_obj_helpers_4(void);
extern s32 cur_obj_is_mario_on_platform(void);
extern s32 cur_obj_shake_y_until(s32 cycles, s32 amount);
extern s32 cur_obj_move_up_and_down(s32 a0);
extern void cur_obj_call_action_function(void (*actionFunctions[])(void));
extern void spawn_base_star_with_no_lvl_exit(void);
extern s32 bit_shift_left(s32 a0);
extern s32 cur_obj_mario_far_away(void);
extern s32 is_mario_moving_fast_or_in_air(s32 speedThreshold);
extern s32 is_item_in_array(s8 item, s8 *array);
extern void bhv_init_room(void);
extern void cur_obj_enable_rendering_if_mario_in_room(void);
extern s32 cur_obj_set_hitbox_and_die_if_attacked(struct ObjectHitbox *hitbox, s32 deathSound, s32 noLootCoins);
extern void obj_explode_and_spawn_coins(f32 sp18, s32 sp1C);
extern void obj_set_collision_data(struct Object *obj, const void *segAddr);
extern void cur_obj_if_hit_wall_bounce_away(void);
extern s32 cur_obj_hide_if_mario_far_away_y(f32 distY);
extern s32 geo_offset_klepto_debug(s32 callContext, struct GraphNode *a1, UNUSED s32 sp8);
extern s32 obj_is_hidden(struct Object *obj);
extern void enable_time_stop(void);
extern void disable_time_stop(void);
extern void set_time_stop_flags(s32 flags);
extern void clear_time_stop_flags(s32 flags);
extern s32 cur_obj_can_mario_activate_textbox(f32 radius, f32 height, UNUSED s32 unused);
extern s32 cur_obj_can_mario_activate_textbox_2(f32 radius, f32 height);
extern s32 cur_obj_update_dialog(s32 actionArg, s32 dialogFlags, s32 dialogID, UNUSED s32 unused);
extern s32 cur_obj_update_dialog_with_cutscene(s32 actionArg, s32 dialogFlags, s32 cutsceneTable, s32 dialogID);
extern s32 cur_obj_has_model(u16 modelID);
extern void cur_obj_align_gfx_with_floor(void);
extern s32 mario_is_within_rectangle(s16 minX, s16 maxX, s16 minZ, s16 maxZ);
extern void cur_obj_shake_screen(s32 shake);
extern s32 obj_attack_collided_from_other_object(struct Object *obj);
extern s32 cur_obj_was_attacked_or_ground_pounded(void);
extern void obj_copy_behavior_params(struct Object *dst, struct Object *src);
extern void cur_obj_init_animation_and_anim_frame(s32 animIndex, s32 animFrame);
extern s32 cur_obj_init_animation_and_check_if_near_end(s32 animIndex);
extern void cur_obj_init_animation_and_extend_if_at_end(s32 animIndex);
extern s32 cur_obj_check_grabbed_mario(void);
extern s32 player_performed_grab_escape_action(void);
extern void cur_obj_unused_play_footstep_sound(s32 animFrame1, s32 animFrame2, s32 sound);
extern void enable_time_stop_including_mario(void);
extern void disable_time_stop_including_mario(void);
extern s32 cur_obj_check_interacted(void);
extern void cur_obj_spawn_loot_blue_coin(void);
extern void cur_obj_spawn_star_at_y_offset(f32 targetX, f32 targetY, f32 targetZ, f32 offsetY);
// src/game/debug_course.c
extern void nop_change_course(void);
// src/game/macro_special_objects.c
extern s16 convert_rotation(s16 inRotation);
extern void spawn_macro_abs_yrot_2params(u32 model, const BehaviorScript *behavior, s16 x, s16 y, s16 z, s16 ry, s16 params);
extern void spawn_macro_abs_yrot_param1(u32 model, const BehaviorScript *behavior, s16 x, s16 y, s16 z, s16 ry, s16 param);
extern void spawn_macro_objects(s16 areaIndex, s16 *macroObjList);
extern void spawn_macro_objects_hardcoded(s16 areaIndex, s16 *macroObjList);
extern void spawn_special_objects(s16 areaIndex, s16 **specialObjList);
extern u32 get_special_objects_size(s16 *data);
// src/game/sound_init.c
extern void reset_volume(void);
extern void disable_background_sound(void);
extern void enable_background_sound(void);
extern void set_sound_mode(u16 soundMode);
extern void play_menu_sounds(s16 soundMenuFlags);
extern void play_painting_eject_sound(void);
extern void play_infinite_stairs_music(void);
extern void set_background_music(u16 a, u16 seqArgs, s16 fadeTimer);
extern void fadeout_music(s16 fadeOutTime);
extern void fadeout_level_music(s16 fadeTimer);
extern void play_cutscene_music(u16 seqArgs);
extern void play_shell_music(void);
extern void stop_shell_music(void);
extern void play_cap_music(u16 seqArgs);
extern void fadeout_cap_music(void);
extern void stop_cap_music(void);
extern void play_menu_sounds_extra(s32 a, void *b);
extern void audio_game_loop_tick(void);
extern void thread4_sound(UNUSED void *arg);
// src/game/behavior_actions.c
extern void spawn_mist_particles_variable(s32 count, s32 offsetY, f32 size);
extern void spawn_sparkle_particles(s32 n, s32 a1, s32 a2, s32 r);
extern void vec3f_copy_2(Vec3f dest, Vec3f src);
extern s32 set_obj_anim_with_accel_and_sound(s16 a0, s16 a1, s32 a2);
// src/game/mario_actions_airborne.c
extern void play_flip_sounds(struct MarioState *m, s16 frame1, s16 frame2, s16 frame3);
extern void play_far_fall_sound(struct MarioState *m);
extern void play_knockback_sound(struct MarioState *m);
extern s32 lava_boost_on_wall(struct MarioState *m);
extern s32 check_fall_damage(struct MarioState *m, u32 hardFallAction);
extern s32 check_kick_or_dive_in_air(struct MarioState *m);
extern s32 should_get_stuck_in_ground(struct MarioState *m);
extern s32 check_fall_damage_or_get_stuck(struct MarioState *m, u32 hardFallAction);
extern s32 check_horizontal_wind(struct MarioState *m);
extern void update_air_with_turn(struct MarioState *m);
extern void update_air_without_turn(struct MarioState *m);
extern void update_lava_boost_or_twirling(struct MarioState *m);
extern void update_flying_yaw(struct MarioState *m);
extern void update_flying_pitch(struct MarioState *m);
extern void update_flying(struct MarioState *m);
extern u32 common_air_action_step(struct MarioState *m, u32 landAction, s32 animation, u32 stepArg);
extern s32 act_jump(struct MarioState *m);
extern s32 act_double_jump(struct MarioState *m);
extern s32 act_triple_jump(struct MarioState *m);
extern s32 act_backflip(struct MarioState *m);
extern s32 act_freefall(struct MarioState *m);
extern s32 act_hold_jump(struct MarioState *m);
extern s32 act_hold_freefall(struct MarioState *m);
extern s32 act_side_flip(struct MarioState *m);
extern s32 act_wall_kick_air(struct MarioState *m);
extern s32 act_long_jump(struct MarioState *m);
extern s32 act_riding_shell_air(struct MarioState *m);
extern s32 act_twirling(struct MarioState *m);
extern s32 act_dive(struct MarioState *m);
extern s32 act_air_throw(struct MarioState *m);
extern s32 act_water_jump(struct MarioState *m);
extern s32 act_hold_water_jump(struct MarioState *m);
extern s32 act_steep_jump(struct MarioState *m);
extern s32 act_ground_pound(struct MarioState *m);
extern s32 act_burning_jump(struct MarioState *m);
extern s32 act_burning_fall(struct MarioState *m);
extern s32 act_crazy_box_bounce(struct MarioState *m);
extern s32 check_wall_kick(struct MarioState *m);
extern s32 act_backward_air_kb(struct MarioState *m);
extern s32 act_forward_air_kb(struct MarioState *m);
extern s32 act_hard_backward_air_kb(struct MarioState *m);
extern s32 act_hard_forward_air_kb(struct MarioState *m);
extern s32 act_thrown_backward(struct MarioState *m);
extern s32 act_thrown_forward(struct MarioState *m);
extern s32 act_soft_bonk(struct MarioState *m);
extern s32 act_getting_blown(struct MarioState *m);
extern s32 act_air_hit_wall(struct MarioState *m);
extern s32 act_forward_rollout(struct MarioState *m);
extern s32 act_backward_rollout(struct MarioState *m);
extern s32 act_butt_slide_air(struct MarioState *m);
extern s32 act_hold_butt_slide_air(struct MarioState *m);
extern s32 act_lava_boost(struct MarioState *m);
extern s32 act_slide_kick(struct MarioState *m);
extern s32 act_jump_kick(struct MarioState *m);
extern s32 act_shot_from_cannon(struct MarioState *m);
extern s32 act_flying(struct MarioState *m);
extern s32 act_riding_hoot(struct MarioState *m);
extern s32 act_flying_triple_jump(struct MarioState *m);
extern s32 act_top_of_pole_jump(struct MarioState *m);
extern s32 act_vertical_wind(struct MarioState *m);
extern s32 act_special_triple_jump(struct MarioState *m);
extern s32 check_common_airborne_cancels(struct MarioState *m);
extern s32 mario_execute_airborne_action(struct MarioState *m);
// src/game/screen_transition.c
extern s32 set_and_reset_transition_fade_timer(s8 fadeTimer, u8 transTime);
extern u8 set_transition_color_fade_alpha(s8 fadeType, s8 fadeTimer, u8 transTime);
extern s32 dl_transition_color(s8 fadeTimer, u8 transTime, struct WarpTransitionData *transData, u8 alpha);
extern s32 render_fade_transition_from_color(s8 fadeTimer, u8 transTime, struct WarpTransitionData *transData);
extern s32 render_fade_transition_into_color(s8 fadeTimer, u8 transTime, struct WarpTransitionData *transData);
extern s16 calc_tex_transition_radius(s8 fadeTimer, s8 transTime, struct WarpTransitionData *transData);
extern f32 calc_tex_transition_time(s8 fadeTimer, s8 transTime, struct WarpTransitionData *transData);
extern u16 convert_tex_transition_angle_to_pos(struct WarpTransitionData *transData);
extern s16 center_tex_transition_x(struct WarpTransitionData *transData, f32 texTransTime, u16 texTransPos);
extern s16 center_tex_transition_y(struct WarpTransitionData *transData, f32 texTransTime, u16 texTransPos);
extern s32 render_textured_transition(s8 fadeTimer, s8 transTime, struct WarpTransitionData *transData, s8 texID, s8 transTexType);
// src/game/area.c
extern void override_viewport_and_clip(Vp *a, Vp *b, u8 c, u8 d, u8 e);
extern void set_warp_transition_rgb(u8 red, u8 green, u8 blue);
extern void print_intro_text(void);
extern u32 get_mario_spawn_type(struct Object *o);
extern void load_obj_warp_nodes(void);
extern void clear_areas(void);
extern void clear_area_graph_nodes(void);
extern void load_area(s32 index);
extern void unload_area(void);
extern void load_mario_area(void);
extern void unload_mario_area(void);
extern void change_area(s32 index);
extern void area_update_objects(void);
extern void play_transition(s16 transType, s16 time, u8 red, u8 green, u8 blue);
extern void play_transition_after_delay(s16 transType, s16 time, u8 red, u8 green, u8 blue, s16 delay);
extern void render_game(void);
// src/game/skybox.c
extern void draw_skybox_tile_grid(Gfx **dlist, s8 background, s8 player, s8 colorIndex);
extern void *create_skybox_ortho_matrix(s8 player);
// src/game/spawn_object.c
extern void unused_deallocate(struct LinkedList *freeList, struct LinkedList *node);
extern void init_free_object_list(void);
extern void clear_object_lists(struct ObjectNode *objLists);
extern void unload_object(struct Object *obj);
extern void mark_obj_for_deletion(struct Object *obj);
// src/game/mario_step.c
extern f32 get_additive_y_vel_for_jumps(void);
extern void stub_mario_step_1(UNUSED struct MarioState *x);
extern void stub_mario_step_2(void);
extern void transfer_bully_speed(struct BullyCollisionData *obj1, struct BullyCollisionData *obj2);
extern void mario_bonk_reflection(struct MarioState *m, u32 negateSpeed);
extern u32 mario_update_quicksand(struct MarioState *m, f32 sinkingSpeed);
extern u32 mario_push_off_steep_floor(struct MarioState *m, u32 action, u32 actionArg);
extern u32 mario_update_moving_sand(struct MarioState *m);
extern u32 mario_update_windy_ground(struct MarioState *m);
extern void stop_and_set_height_to_floor(struct MarioState *m);
extern s32 stationary_ground_step(struct MarioState *m);
extern s32 perform_ground_step(struct MarioState *m);
extern u32 check_ledge_grab(struct MarioState *m, struct Surface *wall, Vec3f intendedPos, Vec3f nextPos);
extern s32 perform_air_quarter_step(struct MarioState *m, Vec3f intendedPos, u32 stepArg);
extern void apply_twirl_gravity(struct MarioState *m);
extern u32 should_strengthen_gravity_for_jump_ascent(struct MarioState *m);
extern void apply_gravity(struct MarioState *m);
extern void apply_vertical_wind(struct MarioState *m);
extern s32 perform_air_step(struct MarioState *m, u32 stepArg);
extern void set_vel_from_pitch_and_yaw(struct MarioState *m);
extern void set_vel_from_yaw(struct MarioState *m);
// src/game/main.c
extern void handle_debug_key_sequences(void);
extern void unknown_main_func(void);
extern void stub_main_1(void);
extern void stub_main_2(void);
extern void stub_main_3(void);
extern void setup_mesg_queues(void);
extern void alloc_pool(void);
extern void create_thread(OSThread *thread, OSId id, void (*entry)(void *), void *arg, void *sp, OSPri pri);
extern void handle_nmi_request(void);
extern void receive_new_tasks(void);
extern void start_sptask(s32 taskType);
extern void interrupt_gfx_sptask(void);
extern void start_gfx_sptask(void);
extern void pretend_audio_sptask_done(void);
extern void handle_vblank(void);
extern void handle_sp_complete(void);
extern void handle_dp_complete(void);
extern void thread3_main(UNUSED void *arg);
extern void set_vblank_handler(s32 index, struct VblankHandler *handler, OSMesgQueue *queue, OSMesg *msg);
extern void send_sp_task_message(OSMesg *msg);
extern void dispatch_audio_sptask(struct SPTask *spTask);
extern void send_display_list(struct SPTask *spTask);
extern void turn_on_audio(void);
extern void turn_off_audio(void);
extern void thread1_idle(UNUSED void *arg);
extern void main_func(void);
// src/engine/math_util.c
extern void *vec3f_copy(Vec3f dest, Vec3f src);
extern void *vec3f_set(Vec3f dest, f32 x, f32 y, f32 z);
extern void *vec3f_add(Vec3f dest, Vec3f a);
extern void *vec3f_sum(Vec3f dest, Vec3f a, Vec3f b);
extern void *vec3s_copy(Vec3s dest, Vec3s src);
extern void *vec3s_set(Vec3s dest, s16 x, s16 y, s16 z);
extern void *vec3s_add(Vec3s dest, Vec3s a);
extern void *vec3s_sum(Vec3s dest, Vec3s a, Vec3s b);
extern void *vec3s_sub(Vec3s dest, Vec3s a);
extern void *vec3s_to_vec3f(Vec3f dest, Vec3s a);
extern void *vec3f_to_vec3s(Vec3s dest, Vec3f a);
extern void *find_vector_perpendicular_to_plane(Vec3f dest, Vec3f a, Vec3f b, Vec3f c);
extern void *vec3f_cross(Vec3f dest, Vec3f a, Vec3f b);
extern void *vec3f_normalize(Vec3f dest);
extern void mtxf_copy(Mat4 dest, Mat4 src);
extern void mtxf_identity(Mat4 mtx);
extern void mtxf_translate(Mat4 dest, Vec3f b);
extern void mtxf_lookat(Mat4 mtx, Vec3f from, Vec3f to, s16 roll);
extern void mtxf_rotate_zxy_and_translate(Mat4 dest, Vec3f translate, Vec3s rotate);
extern void mtxf_rotate_xyz_and_translate(Mat4 dest, Vec3f b, Vec3s c);
extern void mtxf_billboard(Mat4 dest, Mat4 mtx, Vec3f position, s16 angle);
extern void mtxf_align_terrain_normal(Mat4 dest, Vec3f upDir, Vec3f pos, s16 yaw);
extern void mtxf_align_terrain_triangle(Mat4 mtx, Vec3f pos, s16 yaw, f32 radius);
extern void mtxf_mul(Mat4 dest, Mat4 a, Mat4 b);
extern void mtxf_scale_vec3f(Mat4 dest, Mat4 mtx, Vec3f s);
extern void mtxf_mul_vec3s(Mat4 mtx, Vec3s b);
extern void mtxf_to_mtx(Mtx *dest, Mat4 src);
extern void mtxf_rotate_xy(Mtx *mtx, s16 angle);
extern void get_pos_from_transform_mtx(Vec3f dest, Mat4 objMtx, Mat4 camMtx);
extern void vec3f_get_dist_and_angle(Vec3f from, Vec3f to, f32 *dist, s16 *pitch, s16 *yaw);
extern void vec3f_set_dist_and_angle(Vec3f from, Vec3f to, f32 dist, s16 pitch, s16 yaw);
extern s32 approach_s32(s32 current, s32 target, s32 inc, s32 dec);
extern f32 approach_f32(f32 current, f32 target, f32 inc, f32 dec);
extern s16 atan2s(f32 y, f32 x);
extern f32 atan2f(f32 y, f32 x);
extern void spline_get_weights(Vec4f result, f32 t, UNUSED s32 c);
extern void anim_spline_init(Vec4s *keyFrames);
extern s32 anim_spline_poll(Vec3f result);
// src/engine/behavior_script.c
extern u16 random_u16(void);
extern f32 random_float(void);
extern s32 random_sign(void);
extern void obj_update_gfx_pos_and_angle(struct Object *obj);
extern void stub_behavior_script_2(void);
extern void cur_obj_update(void);
// src/engine/graph_node_manager.c
extern s16 *read_vec3s_to_vec3f(Vec3f dst, s16 *src);
extern s16 *read_vec3s(Vec3s dst, s16 *src);
extern s16 *read_vec3s_angle(Vec3s dst, s16 *src);
extern void register_scene_graph_node(struct GraphNode *graphNode);
// src/engine/graph_node.c
extern void init_scene_graph_node_links(struct GraphNode *graphNode, s32 type);
extern void geo_call_global_function_nodes_helper(struct GraphNode *graphNode, s32 callContext);
extern void geo_call_global_function_nodes(struct GraphNode *graphNode, s32 callContext);
extern void geo_reset_object_node(struct GraphNodeObject *graphNode);
extern void geo_obj_init(struct GraphNodeObject *graphNode, void *sharedChild, Vec3f pos, Vec3s angle);
extern void geo_obj_init_spawninfo(struct GraphNodeObject *graphNode, struct SpawnInfo *spawn);
extern void geo_obj_init_animation(struct GraphNodeObject *graphNode, struct Animation **animPtrAddr);
extern void geo_obj_init_animation_accel(struct GraphNodeObject *graphNode, struct Animation **animPtrAddr, u32 animAccel);
extern s32 retrieve_animation_index(s32 frame, u16 **attributes);
extern s16 geo_update_animation_frame(struct GraphNodeObject_sub *obj, s32 *accelAssist);
extern void geo_retreive_animation_translation(struct GraphNodeObject *obj, Vec3f position);
// src/engine/level_script.c
// src/engine/geo_layout.c
extern void geo_layout_cmd_branch_and_link(void);
extern void geo_layout_cmd_end(void);
extern void geo_layout_cmd_branch(void);
extern void geo_layout_cmd_return(void);
extern void geo_layout_cmd_open_node(void);
extern void geo_layout_cmd_close_node(void);
extern void geo_layout_cmd_assign_as_view(void);
extern void geo_layout_cmd_update_node_flags(void);
extern void geo_layout_cmd_node_root(void);
extern void geo_layout_cmd_node_ortho_projection(void);
extern void geo_layout_cmd_node_perspective(void);
extern void geo_layout_cmd_node_start(void);
extern void geo_layout_cmd_nop3(void);
extern void geo_layout_cmd_node_master_list(void);
extern void geo_layout_cmd_node_level_of_detail(void);
extern void geo_layout_cmd_node_switch_case(void);
extern void geo_layout_cmd_node_camera(void);
extern void geo_layout_cmd_node_translation_rotation(void);
extern void geo_layout_cmd_node_translation(void);
extern void geo_layout_cmd_node_rotation(void);
extern void geo_layout_cmd_node_scale(void);
extern void geo_layout_cmd_nop2(void);
extern void geo_layout_cmd_node_animated_part(void);
extern void geo_layout_cmd_node_billboard(void);
extern void geo_layout_cmd_node_display_list(void);
extern void geo_layout_cmd_node_shadow(void);
extern void geo_layout_cmd_node_object_parent(void);
extern void geo_layout_cmd_node_generated(void);
extern void geo_layout_cmd_node_background(void);
extern void geo_layout_cmd_nop(void);
extern void geo_layout_cmd_copy_view(void);
extern void geo_layout_cmd_node_held_obj(void);
extern void geo_layout_cmd_node_culling_radius(void);
// src/engine/surface_load.c
extern void alloc_surface_pools(void);
extern u32 get_area_terrain_size(s16 *data);
extern void load_area_terrain(s16 index, s16 *data, s8 *surfaceRooms, s16 *macroObjects);
extern void clear_dynamic_surfaces(void);
extern void transform_object_vertices(s16 **data, s16 *vertexData);
extern void load_object_surfaces(s16 **data, s16 *vertexData);
extern void load_object_collision_model(void);
// src/engine/surface_collision.c
extern s32 f32_find_wall_collision(f32 *xPtr, f32 *yPtr, f32 *zPtr, f32 offsetY, f32 radius);
extern s32 find_wall_collisions(struct WallCollisionData *colData);
extern f32 find_ceil(f32 posX, f32 posY, f32 posZ, struct Surface **pceil);
extern f32 unused_obj_find_floor_height(struct Object *obj);
extern f32 find_floor_height_and_data(f32 xPos, f32 yPos, f32 zPos, struct FloorGeometry **floorGeo);
extern f32 find_floor_height(f32 x, f32 y, f32 z);
extern f32 unused_find_dynamic_floor(f32 xPos, f32 yPos, f32 zPos, struct Surface **pfloor);
extern f32 find_floor(f32 xPos, f32 yPos, f32 zPos, struct Surface **pfloor);
extern f32 find_water_level(f32 x, f32 z);
extern f32 find_poison_gas_level(f32 x, f32 z);
extern void debug_surface_list_info(f32 xPos, f32 zPos);
